Test support:
  matchers for "this valise would look up <path> and find <full path> if it
  existed

  Quick mock valise - if you're using Valise for file access, mock this hash of
  files in

Switch from "segments" to Pathname - but check this use case from RhetButler:

      @base_valise.sub_set("templates").glob("assets/**").map do |stack|                                               stack.segments[1..-2] +
          [stack.segments.last.sub(/(.*(?:\..*)?).*/){|| $1}]
      end.uniq.each do |target_file|                                                                                   target_valise.get(target_file).writable.first.contents =
          template_handler.render(target_file, nil)
      end

That is: look for all the blah.html.erb and thing.css.sass files in assets,
render them (if they need rendering) and then write them to the appropriate
path. (That is: the path without a template extension) Should be doable...

Some extra access methods:
  set.contents(path) -> the contents
  set.write_to(path, contents) (first writable)
  set.raw(path) -> the actual string at that parth
  set.raw_write_to(path, contents) etc

Really need to have a useful error message (or at least a hint) that a search
root doesn't exist. Just spend 15 minutes trying to track down an API problem
when the issue was that I was pointing at a wrong directory

Nice way to format search paths.  It'd be nice for client code to be able to
quickly output:

Searching for meaning in:
  .
  ~/.place
  /etc/place

With some config on how to do that.

Likewise, a tool to catch Valise::NotFound and print a nice error instead of
the single-line thing

Also: better errors for unregistered strategies - the available ones would help

I got the error "some_path not found in nil" from Stack - @valise == nil ...

Find directories by searching up until you find a file ... example would be to
look for .git dir and use that as the root of a code repo. Tricky because might
accidentally include the root - but also something like "build a Set out of all
the directories above this one with this_app_config dirs" - combined with hash
merge, allows for very powerful per-directory config

Considering: a Stack and a PathMatcher could be the same thing.  Thinking: the
path passed to Stack could have marked regexp patterns - that becomes * for
fnmatch and regexp.  Stack produces paths with *, we expand those, and match
the expansion against the regexp.  Allows for e.g. Rails style template
finding.  Also an intersection, or just an "item_in?()" method would mean same
class could be used instead of PM for dump/load and merges.

Consequence would be that Stack would have to actually do the searching.
There's also the difference between find and write - write to a match?  Also,
in addition to T->B conscerns, we have L->R (or longest first... or "prefer
matches like").  Or Stack would generate ItemGroups (or PathMatches) which
would themselves have to be iterated.

One solution to "what does it mean to write to a matching pattern" would be:
find the "best" match in any root, then write to that path in the best root.

*** Anything below this line needs review: might be done. ***

Utility function for ExtensionDecorator:
  find "settings" and look for settings.yaml, settings.json, settings.xml,
  settings.cfg, and manipulate their contents regardless.
  So that's: make an extension decorator for everything that we can parse into
  a hash, and mark each of settings.{...} as hash_merge etc.
  Needs control for preference of write format


!  The real test case is: I want to populate {:hash => { :of => ["Arrays"]}} -
the population/search preference is for JSON,YAML,XML - and there is a YAML
file in the Set - when do we write hash_of_arrays.json, when do we replace
hash_of_arrays.yaml, etc...

DOCUMENTATION

A presentation, maybe

More mundane note, need at least a FileNotFound error
