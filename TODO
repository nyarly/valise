The facility to treat particular files as if they contain a particular kind of data (e.g. yaml) has been removed.  I'd like to get that back.  It'd be nice to open a yaml file and get structured data, manipulate it, and put it back as yaml.

Even cooler might be to be able to replicate the Ruby require funtionality - find "settings" and look for settings.yaml, settings.json, settings.xml, settings.cfg, and manipulate their contents regardless.

Really this is a Metadata feature, although there's a related but orthagonal behavior to path searching.  First: there's searching by filetype, and populating by filetype.  Sets might become a convolution of some kind of search roots and metadata-rulesets.

Which implies config/convention about how to manage both the search and the population.  I kind of think a "reading English" style convention is probably correct: l->r,t->b :: filetype,searchroot.  Likewise, DefinedDefaults need a way to prefer one over the other.

!  The real test case is: I want to populate {:hash => { :of => ["Arrays"]}} - the population/search preference is for JSON,YAML,XML - and there is a YAML file in the Set - when do we write hash_of_arrays.json, when do we replace hash_of_arrays.yaml, etc...

There's also the process of matching a file to a filetype - just extension?

I'm also still not completely convinced of the names used in the API.  Needs a fresh look, some final decisions, and a final pass.




More mundane note, need at least a FileNotFound error
